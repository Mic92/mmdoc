#!/usr/bin/env bash
# SPDX-License-Identifier: CC0-1.0
set -Eeuo pipefail
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

PACKAGE="mmdoc"

function show_help () {
  echo "$PACKAGE - minimal markdown documentation"
  echo " "
  echo "$PACKAGE -m SRC OUT"
  echo ' '
  echo 'options:'
  echo '-h, --help                show help'
  echo '-v, --verbose             verbose output'
  echo '-w, --website             output multipage website'
  echo '-s, --single              output single page website'
  echo ' '
  echo 'SRC a directory containing Markdown files; a file called toc.md at the top level'
  echo 'is required.'
  echo ' '
  echo 'OUT a directory where the website is written to'
}

test $# -eq 0 && (show_help && exit 1)

WEBSITE=
SINGLE=

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--verbose)
      shift
      set -x
      ;;
    -w|--website)
      WEBSITE=1
      shift
      if test $# -gt 0; then
        export src="$1"
      else
        echo "no SRC specified"
        exit 1
      fi
      shift
      if test $# -gt 0; then
        export out="$1"
      else
        echo "no OUT specified"
        exit 1
      fi
      shift
      ;;
    -s|--single)
      SINGLE=1
      shift
      if test $# -gt 0; then
        export src="$1"
      else
        echo "no SRC specified"
        exit 1
      fi
      shift
      if test $# -gt 0; then
        export out="$1"
      else
        echo "no OUT specified"
        exit 1
      fi
      shift
      ;;
    *)
      show_help
      exit 1
      ;;
  esac
done

if [ ! -f "$src/toc.md" ]; then
    echo "Expected but did not find: $src/toc.md"
    exit 1
fi

mkdir -p "$out"

install "$DIR"/../lib/mmdoc/* "$out"

REWRITES_PRE=(
  #AdmonitionsStart
  's|::: attention|<div class="attention"><h3 class="title">Attention</h3><p>\n|g;'
  's|::: caution|<div class="caution"><h3 class="title">Caution</h3><p>\n|g;'
  's|::: danger|<div class="danger"><h3 class="title">Danger</h3><p>\n|g;'
  's|::: error|<div class="error"><h3 class="title">Error</h3><p>\n|g;'
  's|::: hint|<div class="hint"><h3 class="title">Hint</h3><p>\n|g;'
  's|::: important|<div class="important"><h3 class="title">Important</h3><p>\n|g;'
  's|::: danger|<div class="danger"><h3 class="title">Danger</h3><p>\n|g;'
  's|::: note|<div class="note"><h3 class="title">Note</h3><p>\n|g;'
  's|::: tip|<div class="tip"><h3 class="title">Tip</h3><p>\n|g;'
  's|::: warning|<div class="warning"><h3 class="title">Warning</h3><p>\n|g;'
  #Header
  's|# ([^{]*)\s\{(#([^}]*))}$|# <span id="\3">[\1](\2)</span>|g;'
  #AdmonitionEnd
  's|:::|</p></div>|g;'
  #BracketedSpan
  's|\[([^]]*)\]\{(#([^}]*))}|<span id="\3">[\1](\2)</span>|g;'
)
REWRITES_PRE_STR="${REWRITES_PRE[*]}"

ANCHOR_REWRITES=()
mapfile -t ANCHOR_DEFS < <(grep -REo "\{#([^}]*)}" "$src")
# TODO look for duplicate anchor definitions here
for AD in "${ANCHOR_DEFS[@]}"; do
  IFS=':' read -ra PARTS <<< "$AD"
  FILE=${PARTS[0]}
  FILE="${FILE%.md}"
  FILE="${FILE%.section}"
  FILE="${FILE%.chapter}"
  FILE="${FILE#"$src/"}/"
  ANCHOR=${PARTS[1]#"{"}
  ANCHOR=${ANCHOR%"}"}
  ANCHOR_REWRITES+=("s|href=\"$ANCHOR|href=\"$FILE$ANCHOR|g;")
done
ANCHOR_REWRITES_STR="${ANCHOR_REWRITES[*]}"

function cmd () {
  if [ "$WEBSITE" ]; then
    sed -r "$REWRITES_PRE_STR" "$1" | cmark-gfm --unsafe -e table | sed -r "$ANCHOR_REWRITES_STR"
  fi
  if [ "$SINGLE" ]; then
    sed -r "$REWRITES_PRE_STR" "$1" | cmark-gfm --unsafe -e table
  fi
}

TOC="$(cmd "$src/toc.md")"

mapfile -t MD_FILES < <(find "$src" -type f -name '*.md' ! -name 'toc.md')
mkdir -p "$TMP/search_index"


function cat_head() {
  cat <<EOF > "$1"
<!doctype html>
<html>
  <head>
    <base href="/">
    <meta charset="utf-8">
    <link href="minimal.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="mono-blue.css">
    <script src="highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    $([ -n "$WEBSITE" ] && echo '<script src="fuse.basic.min.js"></script><script src="search_index.js"></script><script src="search.js"></script>')
  </head>
  <body>
EOF
}

function cat_nav() {
  cat <<EOF >> "$1"
    <nav>
     $([ -n "$WEBSITE" ] && echo '<input type="search" id="search" placeholder="Search"><div id="search-results"></div>')
     $2
    </nav>
    <section>
EOF
}

function cat_foot() {
 cat <<EOF >> "$1"
    </section>
  </body>
</html>
EOF
}

if [ -n "$SINGLE" ]; then
  OUTPUT_FILE="$out/index.html"
  FILE_PATH="index.html"
  LINK_PATH=""
  mkdir -p "$(dirname "$OUTPUT_FILE")"
  cat_head "$OUTPUT_FILE"
  cat_nav "$OUTPUT_FILE" "$TOC"
fi
for file in "${MD_FILES[@]}"; do
  if [ -n "$WEBSITE" ]; then
    echo "website $file"
    OUTPUT_FILE="${file%.md}"
    OUTPUT_FILE="${OUTPUT_FILE%.section}"
    OUTPUT_FILE="${OUTPUT_FILE%.chapter}"
    FILE_PATH="${OUTPUT_FILE#"$src/"}/index.html"
    LINK_PATH="${OUTPUT_FILE#"$src/"}/"
    if [ "${file#"$src/"}" == "index.md" ]; then
      FILE_PATH="index.html"
      LINK_PATH=""
    fi
    OUTPUT_FILE="$out/$FILE_PATH"

    (
      mkdir -p "$(dirname "$OUTPUT_FILE")"
      SECTION="$(cmd "$file")"
      cat_head "$OUTPUT_FILE"
      cat_nav "$OUTPUT_FILE" "$TOC"
      echo "$SECTION" >> "$OUTPUT_FILE"
      cat_foot "$OUTPUT_FILE"
    ) &

    (
      INDEX_PART_FILE="$TMP/search_index/${file#"$src/"}.json"
      mkdir -p "$(dirname "$INDEX_PART_FILE")"
      cmark-gfm -t plaintext "$file" | jq -aRsc '{url: "'"$LINK_PATH"'", text:.}' >> "$INDEX_PART_FILE"
    ) &
  fi
  if [ -n "$SINGLE" ]; then
    SECTION="$(cmd "$file")"
    echo "$SECTION" >> "$OUTPUT_FILE"
  fi
done

if [ -n "$SINGLE" ]; then
  cat_foot "$OUTPUT_FILE"
fi

wait

if [ -n "$WEBSITE" ]; then
  mapfile -t INDEX_PARTS < <(find "$TMP/search_index" -type f -name '*.json' | sort)
  echo -n "const corpus = " >> "$out/search_index.js"
  jq -s "." "${INDEX_PARTS[@]}" >> "$out/search_index.js"
fi
