#!/usr/bin/env bash
# SPDX-License-Identifier: CC0-1.0
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

src=$1
out=$2

mkdir -p "$out"

install "$DIR"/../lib/mmdoc/* "$out"

REWRITES_PRE=(
  #AdmonitionsStart
  's|::: attention|<div class="attention"><h3 class="title">Attention</h3><p>\n|g;'
  's|::: Caution|<div class="Caution"><h3 class="title">Caution</h3><p>\n|g;'
  's|::: danger|<div class="danger"><h3 class="title">Danger</h3><p>\n|g;'
  's|::: error|<div class="error"><h3 class="title">Error</h3><p>\n|g;'
  's|::: hint|<div class="hint"><h3 class="title">Hint</h3><p>\n|g;'
  's|::: important|<div class="important"><h3 class="title">Important</h3><p>\n|g;'
  's|::: danger|<div class="danger"><h3 class="title">Danger</h3><p>\n|g;'
  's|::: note|<div class="note"><h3 class="title">Note</h3><p>\n|g;'
  's|::: tip|<div class="tip"><h3 class="title">Tip</h3><p>\n|g;'
  's|::: warning|<div class="warning"><h3 class="title">Warning</h3><p>\n|g;'
  #Header
  's|# ([^{]*)\s\{(#([^}]*))}$|# <span id="\3">[\1](\2)</span>|g;'
  #AdmonitionEnd
  's|:::|</p></div>|g;'
  #BracketedSpan
  's|\[([^]]*)\]\{(#([^}]*))}|<span id="\3">[\1](\2)</span>|g;'
)
REWRITES_PRE_STR="${REWRITES_PRE[*]}"

ANCHOR_REWRITES=()
mapfile -t ANCHOR_DEFS < <(grep -REo "\{#([^}]*)}" "$src")
# TODO look for duplicate anchor definitions here
for AD in "${ANCHOR_DEFS[@]}"; do
  IFS=':' read -ra PARTS <<< "$AD"
  FILE=${PARTS[0]}
  FILE="${FILE%.md}"
  FILE="${FILE%.section}"
  FILE="${FILE%.chapter}"
  FILE="${FILE#"$src/"}/"
  ANCHOR=${PARTS[1]#"{"}
  ANCHOR=${ANCHOR%"}"}
  ANCHOR_REWRITES+=("s|href=\"$ANCHOR|href=\"$FILE$ANCHOR|g;")
done
ANCHOR_REWRITES_STR="${ANCHOR_REWRITES[*]}"

function cmd () {
  sed -r "$REWRITES_PRE_STR" "$1" | cmark-gfm --unsafe -e table | sed -r "$ANCHOR_REWRITES_STR"
}

TOC="$(cmd "$src/toc.md")"

mapfile -t MD_FILES < <(find "$src" -type f -name '*.md' ! -name 'toc.md')
mkdir -p "$TMP/search_index"
for file in "${MD_FILES[@]}"; do
  OUTPUT_FILE="${file%.md}"
  OUTPUT_FILE="${OUTPUT_FILE%.section}"
  OUTPUT_FILE="${OUTPUT_FILE%.chapter}"
  FILE_PATH="${OUTPUT_FILE#"$src/"}/index.html"
  LINK_PATH="${OUTPUT_FILE#"$src/"}/"
  if [ "${file#"$src/"}" == "index.md" ]; then
    FILE_PATH="index.html"
    LINK_PATH=""
  fi

  OUTPUT_FILE="$out/$FILE_PATH"
  (
  mkdir -p "$(dirname "$OUTPUT_FILE")"
  SECTION="$(cmd "$file")"
  cat <<-EOF > "$OUTPUT_FILE"
<!doctype html>
<html>
  <head>
    <base href="/">
    <meta charset="utf-8">
    <link href="minimal.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="highlightjs/mono-blue.css">
    <script src="highlightjs/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="fuse.basic.min.js"></script>
    <script src="search_index.js"></script>
    <script src="search.js"></script>
  </head>
  <body>
    <nav>
      <h1>Nixpkgs manual</h1>
      <input type="search" id="search" placeholder="Search">
      <div id="search-results">
      </div>
      <script>
      </script>
$TOC
    </nav>
    <section>
$SECTION
    </section>
  </body>
</html>
EOF
) &

(
  INDEX_PART_FILE="$TMP/search_index/${file#"$src/"}.json"
  mkdir -p "$(dirname "$INDEX_PART_FILE")"
  cmark-gfm -t plaintext "$file" | jq -aRsc '{url: "'"$LINK_PATH"'", text:.}' >> "$INDEX_PART_FILE"
) &

done

wait

mapfile -t INDEX_PARTS < <(find "$TMP/search_index" -type f -name '*.json' | sort)
echo -n "const corpus = " >> "$out/search_index.js"
jq -s "." "${INDEX_PARTS[@]}" >> "$out/search_index.js"
